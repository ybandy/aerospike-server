# Aerospike Server
# Makefile.in
#
# Define project global settings for compiler options.
#

# [Note:  "DEPTH" must be defined by the "include"ing Makefile.]

# Common variable definitions:
include $(DEPTH)/make_in/Makefile.vars

CF_INCLUDE_DIR = $(DEPTH)/common/src/include
CF_LIB_DIR     = $(DEPTH)/common/target/$(PLATFORM)/lib

AS_CFLAGS += -D_FILE_OFFSET_BITS=64 -std=gnu99 -D_REENTRANT -D_GNU_SOURCE

# Use the enhanced memory allocator (rather than the default version in the Common module.)
AS_CFLAGS += -DENHANCED_ALLOC

LIBRARIES += -lcrypto

LIBRARIES += -lpthread -lrt -ldl -lz -lm

LIBRARIES += -lnuma

# Location of source files being compiled:
#   "" (the default) means "src".  Automatically set to "../m4/" during non-zero macro expansion build phases.
SRCDIR =

# If GCC v4.4.7 or later, use DWARF version 4, othewise use version 2:
ifeq ($(shell $(DEPTH)/build/versioncheck '$(CC_VERSION)' 4.4.7), 1)
  DWARF_VERSION=4
else
  DWARF_VERSION=2
endif

# Overrride optimizations via: make O=n
O = 3

ifeq ($(DOPROFILE),1)
  OPTFLAGS = -O$(O) -fPIE -pg -fprofile-arcs -ftest-coverage -DDOPROFILE
else
  OPTFLAGS = -O$(O)
endif

# Strict aliasing is really interesting. -fno-strict-aliasing relaxes the coding rules, but makes
# some code run a little slower. I'm not seeing a real difference at the moment, so turning it off
# I think to get the real speed, you turn on -fstrict-aliasing, and the appropriate -W, which 
# generates a few warnings in our code where type punning is used for printf sanity. This
# also interacts with the restrict keyword, which I understand in theory, but attempts to use
# it throw errors out of the compiler so I don't understand it yet.
#
# Removing the frame pointers does add a few percent in speed, too, but we need better debugging
# at this point...
#
# And the jury's a little out on -mss3 and -msse4. They aren't turned on by -march=native,
# even though native should understand that those are the preferred types, and available.
#
# Tree vectorize is turned on the in the O3 mechanism. It's fascinating to turn on the tree vectorize
# debugs. Very rarely do we have loops that vectorize, because we often use functions in our loops.
# and, sometimes loops are vectorized but will need lengths greater than 20 or 30 to show speed improvements,
# loops of this size are unlikely in our code.
#
# O3 also enables -finline-functions, among other things.
COMMON_CFLAGS = -gdwarf-$(DWARF_VERSION) -g3 $(OPTFLAGS) -fno-common -fno-strict-aliasing -Wall $(AS_CFLAGS)

# Code generated for the "nocona" architecture has been determined to run well on a wide variety of current machines.
ifeq ($(ARCH),x86_64)
  COMMON_CFLAGS += -march=nocona
endif

ifeq ($(ARCH), aarch64)
  COMMON_CFLAGS += -mcpu=neoverse-n1
  COMMON_CFLAGS += -fplugin=$(TSO)/tso.so
  COMMON_CFLAGS += -fplugin-arg-tso-enable=$(PLUGIN_ENABLE)
  COMMON_CFLAGS += -fplugin-arg-tso-exclude=$(TSO)/exclude_ce.txt
  COMMON_CFLAGS += -fplugin-arg-tso-track-deps=yes
  COMMON_CFLAGS += -fplugin-arg-tso-fix-asm=$(PLUGIN_FIX_ASM)
  COMMON_CFLAGS += -fplugin-arg-tso-fix-built-in=$(PLUGIN_FIX_BUILT_IN)
  COMMON_CFLAGS += -fplugin-arg-tso-profiling=$(PLUGIN_PROFILING)
endif

# EE-specific flags, must go after -fplugin.
COMMON_CFLAGS += $(AS_EE_CFLAGS)

# Generate dependency files.
COMMON_CFLAGS += -MMD

# Require strict warning-free compilation.
COMMON_CFLAGS += -Werror

ifeq ($(shell $(DEPTH)/build/versioncheck '$(CC_VERSION)' 8.0.0), 1)
  # In Ubuntu 20.04 and RHEL8, GCC has stack clash protection enabled by default.
  COMMON_CFLAGS += -fno-stack-clash-protection
endif

# Override certain warnings under GCC v9+.
ifeq ($(shell $(DEPTH)/build/versioncheck '$(CC_VERSION)' 9.0.0), 1)
  # Disable compilation failure due to warnings about possibly unaligned pointers into packed structs.
  COMMON_CFLAGS += -Wno-address-of-packed-member
endif

ifneq ($(USE_ARGOBOTS),0)
  COMMON_CFLAGS += -DUSE_ARGOBOTS
endif

ifneq ($(USE_CHECKPOINT),0)
  COMMON_CFLAGS += -DUSE_CHECKPOINT
endif

CFLAGS = $(COMMON_CFLAGS) -DMARCH_$(ARCH)

# Define a macro for the base source file name.
DEF_FN += -D__FILENAME__=\"$(notdir $<)\"

LDFLAGS = -rdynamic -L$(CF_LIB_DIR)

STRIP = strip -p -v -s
